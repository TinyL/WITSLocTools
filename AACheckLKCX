#!/usr/bin/perl

##*****************************************************************************
##
##  Project Name:	AA LocProcess
##     File Name:	AACheckLKCX
##        Author:	Stanley Au-Yeung
##          Date:	Thursday, July 28, 2005
##
##   Description:	What it does...
##
##                            Copyright Apple Inc.
##                            All rights reserved.
##
##*****************************************************************************
##                       A U T H O R   I D E N T I T Y
##*****************************************************************************
##
##	Initials	Name
##	--------	-----------------------------------------------
##	SA			Stanley Au-Yeung (stanleyauyeung@asia.apple.com)
##
##*****************************************************************************
##                      R E V I S I O N   H I S T O R Y
##*****************************************************************************
##
##	Date		Time	Author	Description
##	--------	-----	------	---------------------------------------------
##	08/21/08	14:00	SA		version 1.3.1
##	08/21/08	14:00	SA		Add comment to report to ignore component.plist and tarballs error for LXRip
##	05/13/08	19:00	SA		version 1.3
##	05/13/08	19:00	SA		Check Complied Nib files
##	05/10/08	12:00	SA		version 1.2.9
##	05/10/08	12:00	SA		Uses AALoc Libs
##	05/02/07	12:00	SA		version 1.2.8
##	05/02/07	12:00	SA		Support Loc Environment using MacSWPDSLocEnv_
##	12/05/07	12:00	SA		version 1.2.7
##	12/05/07	12:00	SA		Support Loc Environment using MacSWLocEnv_
##	11/28/07	12:00	SA		version 1.2.6
##	11/28/07	12:00	SA		Added CompareLprojCompatibleVersionResult
##	10/18/07	12:00	SA		version 1.2.5
##	10/18/07	12:00	SA		Create AppleGlot cross check report if can't find in LK
##	09/27/07	14:00	SA		version 1.2.4
##	09/27/07	14:00	SA		Fixed kLprojLongForm and kLprojShortForm
##	08/27/07	11:00	SA		version 1.2.3
##	08/27/07	11:00	SA		Update to support short form of .lproj
##	08/17/07	13:00	SA		version 1.2.2
##	08/17/07	13:00	SA		Skipped CheckAppleGlotEnvironmentPermissions.
##								AALocCommand copy loc kit will fix the prermissions
##	08/17/07	13:00	SA		Added CompareLprojCompatibleVersion
##	08/09/07	21:00	SA		version 1.2.1
##	08/09/07	21:00	SA		Check LprojCompatibleVersion is OB OL version not the same.
##	08/07/07	12:00	SA		version 1.2
##	08/07/07	12:00	SA		-checkAllLanguages to check all languages LK
##	08/03/07	23:45	SA		Modify components report format
##	08/02/07	10:00	SA		version 1.1.9
##	08/02/07	10:00	SA		Generate Components Report
##	08/02/07	10:00	SA		Run CheckComponentsPlist by default
##	07/02/07	10:00	SA		version 1.1.8
##	07/02/07	10:00	SA		Fixed a bug in CheckOldLocOldBaseNibFilesFormatDifferent
##	07/01/07	23:00	SA		version 1.1.7
##	07/01/07	23:00	SA		Check <rdar://problem/5298699> OL and OB nib files format different
##	02/03/07	12:00	SA		version 1.1.6
##	02/03/07	12:00	SA		Check hidden files
##	01/22/07	12:00	SA		version 1.1.5
##	12/08/06	18:00	SA		Added .properties and .js checking
##	11/30/06	12:00	SA		Removed pt_PT checking as incorrect .lproj for BR since pt_PT is for PO
##	11/29/06	23:00	SA		version 1.1.4
##	11/29/06	23:00	SA		Modified the error message of cannot find AppleGlot Cross Check Log
##	09/18/06	10:00	SA		version 1.1.3
##	09/18/06	00:30	SA		Ignore "Key contains non ascii character"
##	09/18/06	00:30	SA		Support LX Loc Kits that component name don't
##								have _Tier in AG Env
##	08/25/06	10:00	SA		version 1.1.2
##	08/25/06	10:00	SA		Log file name changed to _checkLocKitLog.txt
##	08/18/06	10:00	SA		version 1.1.1
##	08/18/06	10:00	SA		Added -getVersion
##	08/15/06	22:00	SA		version 1.1
##	08/15/06	22:00	SA		Handle AA Loc Environment new AppleGlot folder name
##	08/13/06	22:00	SA		Skip CheckAppleGlotCrossCheckLog if $gAGCrossCheckLogFile doesn't exist
##	04/28/06	10:00	SA		version 1.0.9
##	04/28/06	10:00	SA		Check empty folder in AG Env
##	04/28/06	10:00	SA		Handle AA Loc Environment Components
##	04/12/06	10:00	SA		version 1.0.8
##	04/12/06	10:00	SA		Handle AA Loc Environment AppleGlot folder name
##	03/24/06	02:00	SA		version 1.0.7
##	03/24/05	01:30	SA		Slip full path file name: "xxxx" in check .strings result
##	03/24/05	01:30	SA		Display warning if key in .strings expending 2 lines
##	03/24/05	01:00	SA		Added GetFileURL() to modify all report format to fix
##								file path with space
##	03/14/06	10:00	SA		version 1.0.6
##	03/14/05	09:00	SA		Added -checkComponentPlist to check
##								component.plist (default don't check)
##	03/08/06	16:00	SA		version 1.0.5
##	03/08/06	15:00	SA		Added checking .searchTerms <rdar://problem/4349322>
##	11/08/05	16:00	SA		version 1.0.4
##	11/08/05	15:00	SA		Fixed the input path name no need to end with "/"
##	10/04/05	17:00	SA		version 1.0.3
##	10/04/05	17:00	SA		Fixed can't handle LKCX path contains "-h"
##	09/15/05	12:00	SA		version 1.0.2
##	09/15/05	12:00	SA		Fixed kLProjCountryCode French and fr are FU instead of F
##	08/22/05	17:00	SA		Added -checkAllLanguages to check all languages' issues
##								in components.plist for PM
##	08/21/05	01:00	SA		Handle path with spaces
##	08/19/05	17:00	SA		Uses file names in NewBase to search AG log files
##	08/18/05	12:00	SA		Log file name with LKCX environment name
##	08/17/05	16:00	SA		version 1.0.1
##	08/17/05	16:00	SA		Add check .string in NewBase
##	08/12/05	12:00	SA		Modify GetLocLanguage() to accept parameter of path to check
##	08/10/05	16:00	SA		version 1.0.0
##	08/10/05	16:00	SA		Fixed checking of AG cross check log
##	08/10/05	15:00	SA		Fixed seraching method of component .plist
##	08/07/05	12:00	SA		version 0.0.9
##								1. Added check component .plist by language
##								2. Added check folder permission in AppleGlot Env
##								3. Added check ____NB in AppleGlot CrossCheck loc
##								4. Added check missing .lproj and incorrect .lproj
##								   for BR
##	08/01/05	12:00	SA		version 0.0.8
##								1. Added component .plist checking
##	07/28/05	12:00	SA		Original version
##
##*****************************************************************************

#=============================================================================================
#	Modules Used
#=============================================================================================

use lib `which "$0"` =~ m#^(.*)/[^/]+$#;

use File::Path;
use File::Find;
use File::stat;
use File::Spec;
use File::Copy;
use File::Basename;
use DiskImage;

use Foundation;
use AALocUtilities;



#=============================================================================================
#	Main Program
#=============================================================================================

# set version string
$version = "1.3.1";

$gLogFile;
$gCountryCode = "";
$gLKCXEnvironmentPath = "";
$gLKCXInfoPath = "";
$gAGEnvironmentPath = "";
$gAGEnvironmentLogsPath = "";
$gNonAGEnvironmentPath = "";
$gSubmissionPath = "";
$gNewBasePath = "";
$gNewLocPath = "";
$gLogsPath = "";
$gNonAGNewBasePath = "";
$gAGCrossCheckLogFile = "";
$gCheckLKCXLogFile = "";
$gCheckLKCXComponentsReportFile = "";
$gTotalNumOfError = 0;
$gNumOfComponents = 0;
@gComponentsList = ();
$gCheckAllLanguages = 0;
$gCheckComponentsPlist = 0;

%gFindLanguageResult = ();

use constant KBase		=> 0;
use constant kLoc		=> 1;



#---------------------------------------------------------------------------------------------
#
#---------------------------------------------------------------------------------------------

#deals with bad arguments
if (@ARGV == 0)
{
	print "\n### ERROR: Found no parameter.\n";
	&Usage();
	exit (2);
}

if (@ARGV > 3)
{
	print "\n### ERROR: Found too many parameters.\n";
	&Usage();
	exit (2);
}

# deals with arguments
foreach $item (@ARGV)
{
	if ($item eq "-help")
	{
		&Usage();
		exit (2);
	}

	if ($item eq "-h")
	{
		&Usage();
		exit (2);
	}

	if ($item eq "-getVersion")
	{
		print $version;
		exit (2);
	}

	if ($item eq "-checkAllLanguages")
	{
		$gCheckAllLanguages = 1;
	}
	elsif (($item eq "-checkComponentPlist"))
	{
		$gCheckComponentsPlist = 1;
	}
	else
	{
		$gLKCXEnvironmentPath = $item;
	}
}

if (-d $gLKCXEnvironmentPath)
{
	$gLKCXEnvironmentPath =~ s|/?$|/|;	# has to end with one slash

	if ($gCheckAllLanguages == 1)
	{
		open gLogFile, "> /LocKitsComponentPlistCheckingResult.txt" or die "Failed to open\n";

		opendir(directory, "$gLKCXEnvironmentPath");
		@dmgSearchResult = grep { !/^\./} readdir(directory);
		closedir(directory);



		foreach $dmgFile (@dmgSearchResult)
		{
			AALocUtilities::PrintLog("\n");
			AALocUtilities::PrintLog("#========================================================================================\n");
			AALocUtilities::PrintLog("# Checking $dmgFile\n");
			AALocUtilities::PrintLog("#========================================================================================\n");
			AALocUtilities::PrintLog("\n");

			print gLogFile "\n";
			print gLogFile "#========================================================================================\n";
			print gLogFile "# $dmgFile\n";
			print gLogFile "#========================================================================================\n";
			print gLogFile "\n";
			
			$dmgFile =~ m/^(.*?)-(.*?)$/;
			$gCountryCode = $1;
		
			my $dmgObj = undef;
			my $mountpoint = undef;
			my $locKitDmgPath = "$gLKCXEnvironmentPath" . $dmgFile;
			
			# mount the image
			$dmgObj = DiskImage->new(image => $locKitDmgPath);
			$dmgObj->attach(readonly => 1);
						
			# copy its contents
			$mountpoint = $dmgObj->getOneMountpoint();
			
			if ($mountpoint)
			{
				$gAGEnvironmentPath = $mountpoint . "/Env/";
				$gNewBasePath = $gAGEnvironmentPath . "_NewBase";
				$gNewLocPath = $gAGEnvironmentPath . "_NewLoc";
				$gOldBasePath = $gAGEnvironmentPath . "_OldBase";
				$gOldLocPath = $gAGEnvironmentPath . "_OldLoc";
				$gNumOfComponents = 0;

				opendir(directory, $gNewBasePath);
				@searchResult = grep { !/^\./} readdir(directory);
				closedir(directory);

				foreach $file (@searchResult)
				{
					if ($file =~ /_Tier/)
					{
						($proj, $newBaseFileName) = reverse(split(/_Tier/, $file));
					}
					else
					{
						$newBaseFileName = $file;
					}
					
					$gComponentsList[$gNumOfComponents] = $newBaseFileName;
					$gNumOfComponents++;
				}
			
			
				$gLKCXInfoPath = $mountpoint . "/_LKCXInfo/";
			
				CheckComponentsPlist();
				
				$dmgFile =~ m/^(.*?)\.(.*?)$/;
				$gCheckLKCXComponentsReportFile = "/LocKitsComponentPlist_" . $1 . ".html";
				GenerateComponentsPlistReport();
			}
			
			$dmgObj->detach();
		}
		

		print gLogFile "#========================================================================================\n";
		print gLogFile "#                                E N D    O F    R E P O R T                             \n";
		print gLogFile "#========================================================================================\n";

		close gLogFile;
	}
	else
	{
		$gLKCXInfoPath = $gLKCXEnvironmentPath . "_LKCXInfo/";
		
		$gAGEnvironmentPath = $gLKCXEnvironmentPath . "Env/";
		$gSubmissionPath = $gLKCXEnvironmentPath . "Submission/";
		$gNonAGEnvironmentPath = $gLKCXEnvironmentPath . "Env_NoGlot/";
		$gAGCrossCheckLogFile = $gLKCXInfoPath . "ag3envcrosscheck_log.txt";
		$gNonAGNewBasePath = $gNonAGEnvironmentPath . "_NewBase/";

		
		my $aLKCXEnvironmentPath = $gLKCXEnvironmentPath;
		$aLKCXEnvironmentPath =~ s|/$||;    # remove trailing slash

		my $locEnvName = basename($aLKCXEnvironmentPath);

		$gCheckLKCXLogFile = $gLKCXInfoPath . $locEnvName . "_checkLocKitLog.txt";
		$gCheckLKCXComponentsReportFile = $gLKCXInfoPath . $locEnvName . "_componentsReport.html";



		# AA Loc Environment
		if (!(-d $gAGEnvironmentPath))
		{
			$locEnvName =~ m/^(.*?)_(.*?)_(.*?)_(.*?)_(.*?)_(.*?)$/;
			my ($locEnv, $projectName, $buildNumber, $locSubmitNumber, $countryCode, $localizer) = ($1, $2, $3, $4, $5, $6);
		
			if ($locEnv eq "LocEnv" || $locEnv eq "MacSWLocEnv" || $locEnv eq "MacSWPDSLocEnv" || $locEnv eq "MacSWProLocEnv")
			{
				$gAGEnvironmentPath =  $gLKCXEnvironmentPath . "AG_" . $projectName . "_" . $buildNumber . "_" . $locSubmitNumber . "_" . $countryCode . "_" . $localizer . "/";
				
				my $reportsPath = $gLKCXEnvironmentPath . "_Reports_" . $countryCode . "/";
							
				if (-d $reportsPath)
				{
					$gCheckLKCXLogFile = $reportsPath . $locEnvName . "_checkLocKitLog.txt";
					$gCheckLKCXComponentsReportFile = $reportsPath . $locEnvName . "_componentsReport.html";
				}
				
				
				my $submissionPath = $gLKCXEnvironmentPath . "Components/";
				
				if (-d $submissionPath)
				{
					$gSubmissionPath = $submissionPath;
				}
				
				$gCountryCode = $countryCode;
			}
		}
		
		if (!(-d $gAGEnvironmentPath))
		{
			print "\n### ERROR: cannot find AppleGlot Env in '$gLKCXEnvironmentPath'.\n";
			exit(1);
		}

		$gNewBasePath = $gAGEnvironmentPath . "_NewBase";
		$gNewLocPath = $gAGEnvironmentPath . "_NewLoc";
		$gOldBasePath = $gAGEnvironmentPath . "_OldBase";
		$gOldLocPath = $gAGEnvironmentPath . "_OldLoc";
		$gAGEnvironmentLogsPath = $gAGEnvironmentPath . "_Logs";

		CheckLKCX();
	}
}
else
{
	print "\n### ERROR: specified path '$gLKCXEnvironmentPath' doesn't exist.\n";
	exit(1);
}

exit(0);




#=============================================================================================
#	Function Definitions
#=============================================================================================

#---------------------------------------------------------------------------------------------
#	GetFileURL
#---------------------------------------------------------------------------------------------

sub GetFileURL
{
	my($inFilePath) = @_;
	my $fileURL = $inFilePath;
	

	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	$fileURL =~ s/\///;
	$fileURL = "<file://localhost/$fileURL>";

	return $fileURL;
}


#---------------------------------------------------------------------------------------------
#	GetLocLanguage
#---------------------------------------------------------------------------------------------

sub GetLocLanguage
{
	my($inPath) = @_;
	my %lprojs = ();
	
	%gFindLanguageResult = ();
	find \&SetLocLproj, $inPath;

	unless (scalar %gFindLanguageResult)
	{
		return "";
	}

	my @tmp = sort {$gFindLanguageResult{$a} <=> $gFindLanguageResult{$b}} keys %gFindLanguageResult;
		
	return $AALocUtilities::kLprojLongForm{$tmp[$#array]};
}

sub SetLocLproj
{
	if (m/(.+).lproj$/ && ($1 ne "English") && ($1 ne "en"))
	{	
		$gFindLanguageResult{$1}++;
	}
}


#---------------------------------------------------------------------------------------------
#	GetLprojCompatibleVersion
#---------------------------------------------------------------------------------------------

sub GetLprojCompatibleVersion
{
	my($inComponent, $inLoc) = @_;
	my $outLprojCompatibleVersion = 99999;

	my $serachPath = $gOldBasePath . "/" . $inComponent;
	my $lprojLanguage = "English";
	
	if ($inLoc eq kLoc)
	{
		$serachPath = $gOldLocPath . "/" . $inComponent;
		$lprojLanguage = GetLocLanguage($gOldLocPath);

		chomp(@searchResult = `find "$serachPath" -type f \\( -path "*/$lprojLanguage.lproj/locversion.plist" \\)`);


		my $shortFormLanguage = $AALocUtilities::kLprojShortForm{$lprojLanguage};

		if ($shortFormLanguage ne $lprojLanguage)
		{
			chomp(@searchShortFormResult = `find "$serachPath" -type f \\( -path "*/$shortFormLanguage.lproj/locversion.plist" \\)`);
			push(@searchResult, @searchShortFormResult);
		}
	}
	else
	{
		chomp(@searchResult = `find "$serachPath" -type f \\( -path "*/$lprojLanguage.lproj/locversion.plist" \\)`);
	}


	foreach $file (@searchResult)
	{
		if (open(LVFILE, "$file"))
		{
			$saveRS = $/;
			undef $/;
			$locVersData = <LVFILE>;
			$/ = $saveRS;
			close (LVFILE);
				
			$locVersData =~ m/LprojCompatibleVersion<\/key>\s*<string>(.*?)<\/string>/;
			$lprojCompatibleVersion = $1;
			
			# if ($lprojCompatibleVersion < $outLprojCompatibleVersion)
			{
				$outLprojCompatibleVersion = $lprojCompatibleVersion;
			}
		}
	}

	return $outLprojCompatibleVersion;
}


#---------------------------------------------------------------------------------------------
#	CompareLprojCompatibleVersion
#---------------------------------------------------------------------------------------------

sub CompareLprojCompatibleVersion
{
	my($inComponent) = @_;
	my $outResult = "(-999 vs -999)";

	my $serachPath = $gOldLocPath . "/" . $inComponent;
	my $lprojLanguage = GetLocLanguage($gOldLocPath);


	chomp(@searchResult = `find "$serachPath" -type f \\( -path "*/$lprojLanguage.lproj/locversion.plist" \\)`);

	foreach $file (@searchResult)
	{
		my $oldLoclprojCompatibleVersion = -1;
		my $oldBaselprojCompatibleVersion = -1;
	
		if (open(LVFILE, "$file"))
		{
			$saveRS = $/;
			undef $/;
			$locVersData = <LVFILE>;
			$/ = $saveRS;
			close (LVFILE);
				
			$locVersData =~ m/LprojCompatibleVersion<\/key>\s*<string>(.*?)<\/string>/;
			$oldLoclprojCompatibleVersion = $1;
		}
		
		
		$oldBaseFile = $file;

		$oldBaseFile =~ s/$lprojLanguage.lproj/English.lproj/;
		$oldBaseFile =~ s/_OldLoc/_OldBase/;

		if (!(-e "$oldBaseFile"))
		{
			$oldBaseFile = $file;
			$oldBaseFile =~ s/$inLprojLanguage.lproj/en.lproj/;
			$oldBaseFile =~ s/_OldLoc/_OldBase/;
		}

		if (-e "$oldBaseFile")
		{
			if (open(LVFILE, "$oldBaseFile"))
			{
				$saveRS = $/;
				undef $/;
				$locVersData = <LVFILE>;
				$/ = $saveRS;
				close (LVFILE);
					
				$locVersData =~ m/LprojCompatibleVersion<\/key>\s*<string>(.*?)<\/string>/;
				$oldBaselprojCompatibleVersion = $1;
			}
		}
		
		$outResult = "($oldBaselprojCompatibleVersion vs $oldLoclprojCompatibleVersion)";
		
		if ($oldLoclprojCompatibleVersion ne $oldBaselprojCompatibleVersion)
		{
			last;
		}
	}

	return $outResult;
}


#---------------------------------------------------------------------------------------------
#	CompareLprojCompatibleVersionResult
#---------------------------------------------------------------------------------------------

sub CompareLprojCompatibleVersionResult
{
	my($inComponent) = @_;

	my $serachPath = $gOldLocPath . "/" . $inComponent;
	my $lprojLanguage = GetLocLanguage($gOldLocPath);


	chomp(@searchResult = `find "$serachPath" -type f \\( -path "*/$lprojLanguage.lproj/locversion.plist" \\)`);

	foreach $file (@searchResult)
	{
		my $oldLoclprojCompatibleVersion = -1;
		my $oldBaselprojCompatibleVersion = -1;
	
		if (open(LVFILE, "$file"))
		{
			$saveRS = $/;
			undef $/;
			$locVersData = <LVFILE>;
			$/ = $saveRS;
			close (LVFILE);
				
			$locVersData =~ m/LprojCompatibleVersion<\/key>\s*<string>(.*?)<\/string>/;
			$oldLoclprojCompatibleVersion = $1;
		}
		
		
		$oldBaseFile = $file;

		$oldBaseFile =~ s/$lprojLanguage.lproj/English.lproj/;
		$oldBaseFile =~ s/_OldLoc/_OldBase/;

		if (!(-e "$oldBaseFile"))
		{
			$oldBaseFile = $file;
			$oldBaseFile =~ s/$inLprojLanguage.lproj/en.lproj/;
			$oldBaseFile =~ s/_OldLoc/_OldBase/;
		}

		if (-e "$oldBaseFile")
		{
			if (open(LVFILE, "$oldBaseFile"))
			{
				$saveRS = $/;
				undef $/;
				$locVersData = <LVFILE>;
				$/ = $saveRS;
				close (LVFILE);
					
				$locVersData =~ m/LprojCompatibleVersion<\/key>\s*<string>(.*?)<\/string>/;
				$oldBaselprojCompatibleVersion = $1;
			}
		}
		
		$outResult = "($oldBaselprojCompatibleVersion vs $oldLoclprojCompatibleVersion)";
		
		if ($oldLoclprojCompatibleVersion ne $oldBaselprojCompatibleVersion)
		{
			$temp = $oldBaseFile;
			$temp =~ s/$gOldBasePath//;
			print gLogFile "	$temp ($oldBaselprojCompatibleVersion vs $oldLoclprojCompatibleVersion)\n";
			#	$temp = $file;
			#	$temp =~ s/$gOldLocPath//;
			#	print gLogFile "	$temp ($oldLoclprojCompatibleVersion)\n";
		}
	}
}


#---------------------------------------------------------------------------------------------
#	GenerateComponentsPlistReport
#---------------------------------------------------------------------------------------------

sub GenerateComponentsPlistReport
{
	my $plistObject;
	my $componentListObject;
	my $numOfError = 0;
	my $foundPlist = 0;
	my $componentsPlistFile = $gLKCXInfoPath . "component.plist";


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Generating component.plist\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	open componentsPlistReportFile, "> $gCheckLKCXComponentsReportFile" or die "Failed to open $gCheckLKCXComponentsReportFile\n";

	print componentsPlistReportFile "<html>

<!--This file created by AACheckLKCX version $version-->

<head>
<style>
<!--table {}
.style0
	{text-align:general;
	vertical-align:bottom;
	white-space:nowrap;
	color:windowtext;
	font-size:10.0pt;
	font-weight:400;
	font-style:normal;
	text-decoration:none;
	font-family:Verdana;
	border:none;}
td
	{padding-top:1px;
	padding-right:1px;
	padding-left:1px;
	color:windowtext;
	font-size:10.0pt;
	font-weight:400;
	font-style:normal;
	text-decoration:none;
	font-family:Verdana;
	text-align:general;
	vertical-align:bottom;
	border:none;
	white-space:nowrap;}
.xl24
	{font-size:10.0pt;
	font-weight:700;
	text-align:center;
	border-top:1.0pt solid windowtext;
	border-right:none;
	border-bottom:none;
	border-left:1.0pt solid windowtext;
	background:#e9e9e9;}
.xl25
	{font-size:10.0pt;
	font-weight:700;
	text-align:center;
	border-top:1.0pt solid windowtext;
	border-right:1.0pt solid windowtext;
	border-bottom:none;
	border-left:1.0pt solid windowtext;
	background:#e9e9e9;}
.xl26
	{font-size:12.0pt;
	font-weight:700;
	text-align:center;
	border-top:1.0pt solid windowtext;
	border-right:1.0pt solid windowtext;
	border-bottom:none;
	border-left:none;
	background:#e9e9e9;}
.xl27
	{font-size:8.0pt; border:1.0pt solid windowtext;}
.xl28
	{font-size:8.0pt; border:1.0pt solid windowtext;
	background:#FF0033;}
-->
</style>
</head>

<body >

<table border=0 cellpadding=5 cellspacing=0 width=561 style='border-collapse:
 collapse;table-layout:fixed'>
 <col width=250>
 <col width=380>
 <col width=380>
 <col width=380>
 <tr height=17>
  <td height=17 class=xl24 width=250>Components</td>
  <td class=xl25 width=380>NewBase</td>
  <td class=xl25 width=380>OldBase</td>
  <td class=xl25 width=380>OldLoc</td>
 </tr>";


	$plistObject = NSDictionary->dictionaryWithContentsOfFile_($componentsPlistFile);

	if ($plistObject and $$plistObject)
	{
		$componentListObject = $plistObject->objectForKey_("Projects");

		if ($componentListObject and $$componentListObject)
		{
			for ($index = 0; $index < $gNumOfComponents; $index++)
			{
				AALocUtilities::PrintLog("Generating component $gComponentsList[$index]\n");

				$componentObject = $componentListObject->objectForKey_($gComponentsList[$index]);

				
				if (! $componentObject or ! $$componentObject)
				{
					print componentsPlistReportFile "<tr height=14>\n";
					print componentsPlistReportFile "<td height=14 class=xl27>$gComponentsList[$index]</td>\n";
					print componentsPlistReportFile "<td height=14 class=xl27>-</td>\n";
					print componentsPlistReportFile "<td height=14 class=xl27>-</td>\n";
					print componentsPlistReportFile "<td height=14 class=xl27>-</td>\n";
				}
				else
				{
					$newBaseObject = $componentObject->objectForKey_("NewBase");
					$oldBaseObject = $componentObject->objectForKey_("OldBase");
					$oldLocObject = $componentObject->objectForKey_("OldLoc");
					

					$newBase = $newBaseObject->description()->UTF8String();

					print componentsPlistReportFile "<tr height=14>\n";
					print componentsPlistReportFile "<td height=14 class=xl27>$gComponentsList[$index]</td>\n";
					print componentsPlistReportFile "<td height=14 class=xl27>$newBase</td>\n";

					if (! $oldBaseObject or ! $$oldBaseObject
						or ! $oldLocObject or ! $$oldLocObject)
					{
						print componentsPlistReportFile "<td height=14 class=xl27>-</td>\n";
						print componentsPlistReportFile "<td height=14 class=xl27>-</td>\n";
					}
					else
					{
						$localizedOldBaseObject = $oldBaseObject->objectForKey_($gCountryCode);
						$localizedOldLocObject = $oldLocObject->objectForKey_($gCountryCode);
						
						if (! $localizedOldBaseObject or ! $$localizedOldBaseObject
							or ! $localizedOldLocObject or ! $$localizedOldLocObject)
						{
							print componentsPlistReportFile "<td height=14 class=xl27>-</td>\n";
							print componentsPlistReportFile "<td height=14 class=xl27>-</td>\n";
						}
						else
						{
							$localizedOldBase = $localizedOldBaseObject->description()->UTF8String();
							$localizedOldLoc = $localizedOldLocObject->description()->UTF8String();
							
							
							($componentAndBuildTrain, $version, $submissionNum, $others) = split(/\./, $localizedOldBase);
							$localizedOldBaseVersion = $componentAndBuildTrain . "." . $version;
							
							($componentAndBuildTrain, $version, $submissionNum, $others) = split(/\./, $localizedOldLoc);
							$localizedOldLocVersion = $componentAndBuildTrain . "." . $version;
						
							
							if ($localizedOldBaseVersion ne $localizedOldLocVersion)
							{
								print componentsPlistReportFile "<td height=14 class=xl28>$localizedOldBase</td>\n";
								print componentsPlistReportFile "<td height=14 class=xl28>$localizedOldLoc</td>\n";
							}
							else
							{
								print componentsPlistReportFile "<td height=14 class=xl27>$localizedOldBase</td>\n";
								print componentsPlistReportFile "<td height=14 class=xl27>$localizedOldLoc</td>\n";
							}
						}
					}
				}
				
				print componentsPlistReportFile "</tr>\n";
			}
		}
	}
	else
	{
		AALocUtilities::PrintLog("Cannot find component.plist\n");
	}
	
	

	print componentsPlistReportFile "</table>
</body>
</html>";


	close componentsPlistReportFile;
}


#---------------------------------------------------------------------------------------------
#	CheckComponentsPlist
#---------------------------------------------------------------------------------------------

sub CheckComponentsPlist
{
	my $plistObject;
	my $componentListObject;
	my $numOfError = 0;
	my $foundPlist = 0;
	my $componentsPlistFile = $gLKCXInfoPath . "component.plist";


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking component.plist\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	print gLogFile "#----------------------------------------------------------------------------------------\n";
	print gLogFile "# component.plist Checking Result (Please ignore the following result for LXRip projects)\n";
	print gLogFile "#----------------------------------------------------------------------------------------\n";

	$plistObject = NSDictionary->dictionaryWithContentsOfFile_($componentsPlistFile);

	if ($plistObject and $$plistObject)
	{
		$componentListObject = $plistObject->objectForKey_("Projects");

		if ($componentListObject and $$componentListObject)
		{
			$foundPlist = 1;
			
			my $compInfoError = 0;
	
			for ($index = 0; $index < $gNumOfComponents; $index++)
			{
				AALocUtilities::PrintLog("Checking component $gComponentsList[$index]\n");

				$componentObject = $componentListObject->objectForKey_($gComponentsList[$index]);
				$newBaseObject = $componentObject->objectForKey_("NewBase");
				$oldBaseObject = $componentObject->objectForKey_("OldBase");
				$oldLocObject = $componentObject->objectForKey_("OldLoc");
				
				$compInfoError = 0;
				
				if (! $componentObject or ! $$componentObject)
				{
					print gLogFile "Cannot find component info of $gComponentsList[$index]\n";
					$numOfError++;
					$compInfoError++;
				}
				else
				{
					if (! $oldBaseObject or ! $$oldBaseObject
						or ! $oldLocObject or ! $$oldLocObject)
					{
						if (! $newBaseObject or ! $$newBaseObject)
						{
							print gLogFile "$gComponentsList[$index]: Cannot find component info\n";
							$numOfError++;
							$compInfoError++;
						}
						else
						{
							print gLogFile "$gComponentsList[$index]: Cannot find OldBase/OldLoc info\n";
							$numOfError++;
							$compInfoError++;
						}
					}
					else
					{
						$localizedOldBaseObject = $oldBaseObject->objectForKey_($gCountryCode);
						$localizedOldLocObject = $oldLocObject->objectForKey_($gCountryCode);
						
						if (! $localizedOldBaseObject or ! $$localizedOldBaseObject
							or ! $localizedOldLocObject or ! $$localizedOldLocObject)
						{
							print gLogFile "$gComponentsList[$index]: no OldBase/OldLoc info\n";
							$numOfError++;
							$compInfoError++;
						}
						else
						{
							$localizedOldBase = $localizedOldBaseObject->description()->UTF8String();
							$localizedOldLoc = $localizedOldLocObject->description()->UTF8String();
							
							($componentAndBuildTrain, $version, $submissionNum, $others) = split(/\./, $localizedOldBase);
							$localizedOldBaseVersion = $componentAndBuildTrain . "." . $version;
							
							($componentAndBuildTrain, $version, $submissionNum, $others) = split(/\./, $localizedOldLoc);
							$localizedOldLocVersion = $componentAndBuildTrain . "." . $version;
						
							
							if ($localizedOldBaseVersion ne $localizedOldLocVersion)
							{
								#	my $OldBaseLprojCompatibleVersion = GetLprojCompatibleVersion($gComponentsList[$index], KBase);
								#	my $OldLocLprojCompatibleVersion = GetLprojCompatibleVersion($gComponentsList[$index], kLoc);

								#	print gLogFile "$gComponentsList[$index]: OldBase and OldLoc don't match\n";
								#	print gLogFile "\t$localizedOldBase ($OldBaseLprojCompatibleVersion)\n";
								#	print gLogFile "\t$localizedOldLoc ($OldLocLprojCompatibleVersion)\n";
								
								my $lprojResult = CompareLprojCompatibleVersion($gComponentsList[$index]);

								print gLogFile "$gComponentsList[$index]: OldBase and OldLoc don't match $lprojResult\n";
								print gLogFile "\t$localizedOldBase\n";
								print gLogFile "\t$localizedOldLoc\n";
								
								CompareLprojCompatibleVersionResult();
								
								$numOfError++;
								$compInfoError++;
							}
						}
					}
				}
				
				if ($compInfoError != 0)
				{
					print gLogFile "\n";
				}
			}
		}
	}
	else
	{
		AALocUtilities::PrintLog("Cannot find component.plist\n");
		print gLogFile "Cannot find component.plist\n";
		
		$numOfError++;
	}
	
	
	$gTotalNumOfError = $gTotalNumOfError + $numOfError;

	if ($numOfError == 0)
	{
		print gLogFile "No Problem Found\n";
	}
	
	print gLogFile "\n\n";
}


#---------------------------------------------------------------------------------------------
#	CheckComponentsPlist
#---------------------------------------------------------------------------------------------

sub CheckComponentsPlistOld
{
	my $plistObject;
	my $componentListObject;
	my $numOfError = 0;
	my $foundPlist = 0;


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking Components .plist\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	print gLogFile "#----------------------------------------------------------------------------------------\n";
	print gLogFile "# Components .plist Checking Result\n";
	print gLogFile "#----------------------------------------------------------------------------------------\n";

	chomp(@searchResult = `find "$gLKCXInfoPath" -type f | grep ".plist"`);

	foreach $file (@searchResult)
	{
		$plistObject = NSDictionary->dictionaryWithContentsOfFile_($file);

		if ($plistObject and $$plistObject)
		{
			$componentListObject = $plistObject->objectForKey_("Projects");
	
			if ($componentListObject and $$componentListObject)
			{
				$foundPlist = 1;
				
				my $compInfoError = 0;
		
				for ($index = 0; $index < $gNumOfComponents; $index++)
				{
					$componentObject = $componentListObject->objectForKey_($gComponentsList[$index]);
					$newBaseObject = $componentObject->objectForKey_("NewBase");
					$oldBaseObject = $componentObject->objectForKey_("OldBase");
					$oldLocObject = $componentObject->objectForKey_("OldLoc");
					
					$compInfoError = 0;
					
					if (! $componentObject or ! $$componentObject)
					{
						print gLogFile "Cannot find component info of $gComponentsList[$index]\n";
						$numOfError++;
						$compInfoError++;
					}
					else
					{
						if (! $newBaseObject or ! $$newBaseObject
							or ! $oldBaseObject or ! $$oldBaseObject
							or ! $oldLocObject or ! $$oldLocObject)
						{
							print gLogFile "Cannot find component info of $gComponentsList[$index]\n";
							$numOfError++;
							$compInfoError++;
						}
						else
						{
							$baseOldBaseVersion = "";
							$oldBaseDontMatch = 0;
							
							for $language ("J", "FU", "D", "N", "T", "E", "CH", "KH", "TA", "S", "DK", "H", "K", "BR")
							{
								$localizedOldBaseObject = $oldBaseObject->objectForKey_($language);
								$localizedOldLocObject = $oldLocObject->objectForKey_($language);
								
								if (! $localizedOldBaseObject or ! $$localizedOldBaseObject
									or ! $localizedOldLocObject or ! $$localizedOldLocObject)
								{
									print gLogFile "$gComponentsList[$index] $language no OldBase/OldLoc\n";
									$numOfError++;
									$compInfoError++;
								}
								else
								{
									$localizedOldBase = $localizedOldBaseObject->description()->UTF8String();
									$localizedOldLoc = $localizedOldLocObject->description()->UTF8String();
									
									($componentAndBuildTrain, $version, $submissionNum, $others) = split(/\./, $localizedOldBase);
									$localizedOldBaseVersion = $componentAndBuildTrain . "." . $version;
									
									($componentAndBuildTrain, $version, $submissionNum, $others) = split(/\./, $localizedOldLoc);
									$localizedOldLocVersion = $componentAndBuildTrain . "." . $version;
								
									
									if ($baseOldBaseVersion eq "")
									{
										$baseOldBaseVersion = $localizedOldBaseVersion;
									}
									else
									{
										if ($localizedOldBaseVersion ne $baseOldBaseVersion)
										{
											# print gLogFile "$gComponentsList[$index] $language OldBase not match others: ";
											# print gLogFile "$localizedOldBase ($baseOldBaseVersion)\n";
										
											$oldBaseDontMatch = 1;
										
											$numOfError++;
											$compInfoError++;
										}
									}
									
									if ($localizedOldBaseVersion ne $localizedOldLocVersion)
									{
										print gLogFile "$gComponentsList[$index] $language OldBase and OldLoc don't match: ";
										print gLogFile "$localizedOldBase, $localizedOldLoc\n";
									
										$numOfError++;
										$compInfoError++;
									}
								}
							}
							
							if ($oldBaseDontMatch == 1)
							{
								print gLogFile "$gComponentsList[$index] OldBase Don't Match\n";
								
								for $language ("J", "FU", "D", "N", "T", "E", "CH", "KH", "TA", "S", "DK", "H", "K", "BR")
								{
									print gLogFile "$language: ";
								
									$localizedOldBaseObject = $oldBaseObject->objectForKey_($language);
									
									if ($localizedOldBaseObject and $$localizedOldBaseObject)
									{
										$localizedOldBase = $localizedOldBaseObject->description()->UTF8String();
										($componentAndBuildTrain, $version, $submissionNum, $others) = split(/\./, $localizedOldBase);
										$localizedOldBaseVersion = $componentAndBuildTrain . "." . $version;
									
										print gLogFile "$localizedOldBaseVersion";
									}
									
									print gLogFile "\n";
								}
							}
						}
					}
					
					if ($compInfoError != 0)
					{
						print gLogFile "\n";
					}
				}
			}
		}
		
		if ($foundPlist == 1)
		{
			last;
		}
	}
	
	if ($foundPlist == 0)
	{
		AALocUtilities::PrintLog("Cannot find components .plist\n");
		print gLogFile "Cannot find components .plist\n";
		
		$numOfError++;
	}
	
	
	$gTotalNumOfError = $gTotalNumOfError + $numOfError;

	if ($numOfError == 0)
	{
		print gLogFile "No Problem Found\n";
	}
	
	print gLogFile "\n\n";
}


#---------------------------------------------------------------------------------------------
#	CheckComponentsPlistByLanguage
#---------------------------------------------------------------------------------------------

sub CheckComponentsPlistByLanguage
{
	my($inLanguage) = @_;
	my $plistObject;
	my $componentListObject;
	my $numOfError = 0;
	my $foundPlist = 0;
	
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking Components .plist\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	print gLogFile "#----------------------------------------------------------------------------------------\n";
	print gLogFile "# Components .plist Checking Result\n";
	print gLogFile "#----------------------------------------------------------------------------------------\n";

	chomp(@searchResult = `find "$gLKCXInfoPath" -type f | grep ".plist"`);

	
	foreach $file (@searchResult)
	{
		$plistObject = NSDictionary->dictionaryWithContentsOfFile_($file);

		if ($plistObject and $$plistObject)
		{
			$componentListObject = $plistObject->objectForKey_("Projects");
	
			if ($componentListObject and $$componentListObject)
			{
				$foundPlist = 1;
				
				my $compInfoError = 0;
		
				for ($index = 0; $index < $gNumOfComponents; $index++)
				{
					$componentObject = $componentListObject->objectForKey_($gComponentsList[$index]);
					$newBaseObject = $componentObject->objectForKey_("NewBase");
					$oldBaseObject = $componentObject->objectForKey_("OldBase");
					$oldLocObject = $componentObject->objectForKey_("OldLoc");
					
					$compInfoError = 0;
					
					if (! $componentObject or ! $$componentObject)
					{
						print gLogFile "Cannot find component info of $gComponentsList[$index]\n";
						$numOfError++;
						$compInfoError++;
					}
					else
					{
						if (! $newBaseObject or ! $$newBaseObject
							or ! $oldBaseObject or ! $$oldBaseObject
							or ! $oldLocObject or ! $$oldLocObject)
						{
							print gLogFile "Cannot find component info of $gComponentsList[$index]\n";
							$numOfError++;
							$compInfoError++;
						}
						else
						{
							$baseOldBaseVersion = "";
							$oldBaseDontMatch = 0;
							
							$localizedOldBaseObject = $oldBaseObject->objectForKey_($inLanguage);
							$localizedOldLocObject = $oldLocObject->objectForKey_($inLanguage);
							
							if (! $localizedOldBaseObject or ! $$localizedOldBaseObject
								or ! $localizedOldLocObject or ! $$localizedOldLocObject)
							{
								print gLogFile "$gComponentsList[$index] $inLanguage no OldBase/OldLoc\n";
								$numOfError++;
								$compInfoError++;
							}
							else
							{
								$localizedOldBase = $localizedOldBaseObject->description()->UTF8String();
								$localizedOldLoc = $localizedOldLocObject->description()->UTF8String();
								
								($componentAndBuildTrain, $version, $submissionNum, $others) = split(/\./, $localizedOldBase);
								$localizedOldBaseVersion = $componentAndBuildTrain . "." . $version;
								
								($componentAndBuildTrain, $version, $submissionNum, $others) = split(/\./, $localizedOldLoc);
								$localizedOldLocVersion = $componentAndBuildTrain . "." . $version;
							
								
								if ($localizedOldBaseVersion ne $localizedOldLocVersion)
								{
									print gLogFile "$gComponentsList[$index] $inLanguage OldBase and OldLoc don't match: ";
									print gLogFile "$localizedOldBase, $localizedOldLoc\n";
								
									$numOfError++;
									$compInfoError++;
								}
							}
		
		
							#-------------------------------------------------------------------------
							#	Compare Old Base
							#-------------------------------------------------------------------------
							
							if ($localizedOldBaseObject and $$localizedOldBaseObject)
							{
								$localizedOldBase = $localizedOldBaseObject->description()->UTF8String();
								($componentAndBuildTrain, $version, $submissionNum, $others) = split(/\./, $localizedOldBase);
								$baseOldBaseVersion = $componentAndBuildTrain . "." . $version;
							
								$oldBaseCompareError = 0;
								
								for $language ("J", "FU", "D", "N", "T", "E", "CH", "KH", "TA", "S", "DK", "H", "K", "BR")
								{
									$localizedOldBaseObject = $oldBaseObject->objectForKey_($language);
									
									if ($localizedOldBaseObject and $$localizedOldBaseObject)
									{
										$localizedOldBase = $localizedOldBaseObject->description()->UTF8String();
										($componentAndBuildTrain, $version, $submissionNum, $others) = split(/\./, $localizedOldBase);
										$localizedOldBaseVersion = $componentAndBuildTrain . "." . $version;
									
										if ($baseOldBaseVersion ne $localizedOldBaseVersion)
										{
											if ($oldBaseCompareError == 0)
											{
												print gLogFile "$gComponentsList[$index] $inLanguage OldBase ($baseOldBaseVersion) don't match other language(s)\n";
											}
										
											print gLogFile "$language: $localizedOldBaseVersion\n";
											
											$oldBaseCompareError++;
											$numOfError++;
											$compInfoError++;
										}
									}
								}
							}
						}
					}
					
					if ($compInfoError != 0)
					{
						print gLogFile "\n";
					}
				}
			}
		}
		
		if ($foundPlist == 1)
		{
			last;
		}
	}
	
	if ($foundPlist == 0)
	{
		AALocUtilities::PrintLog("Cannot find components .plist\n");
		print gLogFile "Cannot find components .plist\n";
		
		$numOfError++;
	}
	
	
	$gTotalNumOfError = $gTotalNumOfError + $numOfError;

	if ($numOfError == 0)
	{
		print gLogFile "No Problem Found\n";
	}
	
	print gLogFile "\n\n";
}


#---------------------------------------------------------------------------------------------
#	CheckAppleGlotEmptyFolder
#---------------------------------------------------------------------------------------------

sub CheckAppleGlotEmptyFolder
{
	my($inPath) = @_;
	my $outNumOfError = 0;
	
	
	opendir(directory, $inPath);
    @searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);
	
	foreach $file (@searchResult)
	{
		my $fullPath = $inPath . "/" . $file;
		
		opendir(directory, $fullPath);
		@searchResult2 = grep { !/^\./} readdir(directory);
		closedir(directory);
		
		if (scalar(@searchResult2) == 0)
		{
			print gLogFile "$fullPath empty folder\n";
	
			$outNumOfError++;
		}
	}
	
	
	return $outNumOfError;
}


#---------------------------------------------------------------------------------------------
#	CheckAppleGlotStringsFiles
#---------------------------------------------------------------------------------------------

sub CheckAppleGlotStringsFiles
{
	my $numOfCheckingError = 0;
	my $numOfError = 0;
	my $error = "";
	my $file;
	

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking AppleGlot Environment .strings Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	print gLogFile "#----------------------------------------------------------------------------------------\n";
	print gLogFile "# AppleGlot Environment .strings Files Result\n";
	print gLogFile "#----------------------------------------------------------------------------------------\n";


	# chomp(@searchResult = `find "$gNewBasePath" -type f \\( -path "*/English.lproj/*" \\)  | grep -v ".plist.strings"  | grep -v ".nib.strings" | grep ".strings"`);
	chomp(@searchResult = `find "$gNewBasePath" -type f \\( -path "*/English.lproj/*.strings" -or -path "*/en.lproj/*.strings" \\)  | grep -v ".plist.strings"  | grep -v ".nib.strings"`);

	foreach $file (@searchResult)
	{
		$numOfError = 0;
		
		$englishFile = $file;
				
		$file =~ s/$gNewBasePath//;	# take out the base path
		$file =~ m/\/(.*)/;			# take out the first /
		$file = $1;

		AALocUtilities::PrintLog("Checking $file\n");
		
		@englishFileResult = `check_strings "$englishFile"`;

		for ($index = 0; $index < @englishFileResult; $index++)
		{
			$line = $englishFileResult[$index];
			
			# skip full path file name: "xxxx"
			# skip key contains non ascii character!
			if ($line =~ /full path file name: "$englishFile"/
				|| $line =~ /contains non ascii character/)
			{
				next;
			}
			
			if ($line !~ /\[Warning\]/
				|| $line =~ /expending 2 lines/)
			{
				if ($numOfError == 0)
				{
					# print gLogFile "\<file:$englishFile\>\n";
					print gLogFile GetFileURL($englishFile) . "\n";
				}
				
				print gLogFile "$line";
				
				$numOfError++;
			}
		}

		if ($numOfError != 0)
		{
			print gLogFile "\n";
		}
		
		$numOfCheckingError += $numOfError;
	}

		
	$gTotalNumOfError = $gTotalNumOfError + $numOfCheckingError;

	if ($numOfCheckingError == 0)
	{
		print gLogFile "No Problem Found\n";
	}
	
	print gLogFile "\n\n";
}


#---------------------------------------------------------------------------------------------
#	CheckAppleGlotEnvironmentPermissions
#---------------------------------------------------------------------------------------------

sub CheckAppleGlotEnvironmentPermissions
{
	my $numOfError = 0;
	my $error = "";
	my $file;
	

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking AppleGlot Environment Permissions\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	print gLogFile "#----------------------------------------------------------------------------------------\n";
	print gLogFile "# AppleGlot Environment Permission Checking Result\n";
	print gLogFile "#----------------------------------------------------------------------------------------\n";

	$numOfError = 0;

	chomp(@searchResult = `find "$gAGEnvironmentPath" -type d`);

	foreach $file (@searchResult)
	{
		$error = `ls -dl "$file"`;
		
		if ($error =~ m/dr-xr-xr-x/)
		{
			if ($numOfError == 0)
			{
				print gLogFile "The following folders have permission problem:\n";
			}
			
			print gLogFile "dr-xr-xr-x  $file\n";
		
			$numOfError++;
		}
	}

	if ($numOfError != 0)
	{
		print gLogFile "\n";
	}


	$error = "";
	$error = `ls -Rl $gAGEnvironmentPath | grep "\\-r--r--r-"`;
	
	if ($error ne "")
	{
		print gLogFile "The following files have permission problem:\n";
		print gLogFile "$error";
		
		$numOfError++;
	}

		
	$gTotalNumOfError = $gTotalNumOfError + $numOfError;

	if ($numOfError == 0)
	{
		print gLogFile "No Problem Found\n";
	}
	
	print gLogFile "\n\n";
}


#-----------------------------------------------------------------------------------------
#	CheckAppleGlotCrossCheckLog
#-----------------------------------------------------------------------------------------

sub CheckAppleGlotCrossCheckLog
{
	my $numOfError = 0;
	my @logFileContent;
	my $line;


	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking AppleGlot Cross Check Log\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	if (!(-e "$gAGCrossCheckLogFile"))
	{
		#	AALocUtilities::PrintLog("\nERROR: AppleGlot Cross Check Log doesn't exist.\n");
		#	return;
		
		my $lprojLanguage = GetLocLanguage($gNewLocPath);
		my $countryCode = $AALocUtilities::kLprojLanguageCode2CountryCode{$lprojLanguage};

		`ag3envcrosscheck $gAGEnvironmentPath $countryCode all > $gAGCrossCheckLogFile`;
	}


	print gLogFile "#----------------------------------------------------------------------------------------\n";
	print gLogFile "# AppleGlot Cross Check Result\n";
	print gLogFile "#----------------------------------------------------------------------------------------\n";

	open(LOGFILECONTENT, "<$gAGCrossCheckLogFile") or die "Cannot open '$gAGCrossCheckLogFile': $!";
		@logFileContent = <LOGFILECONTENT>;
	close(LOGFILECONTENT);

	$numOfError = 0;

	for (my $index = 0; $index < @logFileContent; $index++)
	{
		$line = $logFileContent[$index];
	
		if ($line =~ m/ERRORS DETECTED/)
		{
			print gLogFile "$logFileContent[$index - 1]";
			print gLogFile "$line";
			
			while ($index < @logFileContent)
			{
				$index++;
				$line = $logFileContent[$index];
				
				if (($line =~ m/--------------------/) || ($line =~ m/\.\.\.\.\.\.\.\.\.\.\.\./))
				{
					last;
				}
				else
				{
					print gLogFile "$line";
				}
			}
			
			$numOfError++;
		}
		elsif (($line =~ m/OL__NB/) || ($line =~ m/__OBNB/) || ($line =~ m/____NB/))
		{
			print gLogFile "$line";
			
			$numOfError++;
		}
	}

	
	$gTotalNumOfError = $gTotalNumOfError + $numOfError;

	if ($numOfError == 0)
	{
		print gLogFile "No Problem Found\n";
	}
	
	print gLogFile "\n\n";
}


#---------------------------------------------------------------------------------------------
#	CheckAppleGlotLogFiles
#---------------------------------------------------------------------------------------------

sub CheckAppleGlotLogFiles
{
	my $numOfError = 0;
	my $numOfLogFileError = 0;
	my $logFile;
	my $file;
	my @logFileContent;
	my $line;
	my $directory;
	

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking AppleGlot Log files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	print gLogFile "#----------------------------------------------------------------------------------------\n";
	print gLogFile "# AppleGlot Log Files Checking Result\n";
	print gLogFile "#----------------------------------------------------------------------------------------\n";

	opendir(directory, $gNewBasePath);
    @searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Checking AppleGlot log file $file\n");
		
		$logFile = $gAGEnvironmentLogsPath . "/" . $file;


		open(LOGFILECONTENT, "<$logFile") or die "Cannot open '$logFile': $!";
			@logFileContent = <LOGFILECONTENT>;
		close(LOGFILECONTENT);
	
		$numOfLogFileError = 0;
	
		foreach $line(@logFileContent)
		{
			if (($line =~ m/ErrK/)
			    || ($line =~ m/Uncaught exception/)
			    || ($line =~ m/palette needed/)
			    || ($line =~ m/nibtool: could not load/)
			    || ($line =~ m/No Translator found for resource type/))
			{
				if ($numOfLogFileError == 0)
				{
					print gLogFile "$file have problem\n";
				}
			
				print gLogFile "$line";
				
				$numOfLogFileError++;
			}
		}

		if ($numOfLogFileError != 0)
		{
			print gLogFile "\n";
		}

		$numOfError = $numOfError + $numOfLogFileError;
		$gTotalNumOfError = $gTotalNumOfError + $numOfLogFileError;
	}

		
	if ($numOfError == 0)
	{
		print gLogFile "No Problem Found\n";
	}
	
	print gLogFile "\n\n";
}


#---------------------------------------------------------------------------------------------
#	CheckCompliedNib
#---------------------------------------------------------------------------------------------

sub CheckCompliedNib
{
	my $numOfError = 0;
	my $file;
	
	
	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking Complied Nib files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	
	print gLogFile "#----------------------------------------------------------------------------------------\n";
	print gLogFile "# Complied Nib Files Checking Result\n";
	print gLogFile "#----------------------------------------------------------------------------------------\n";
	
	chomp(@searchResult = `find "$gNewBasePath" -type f \\( -path "*/English.lproj/*.nib" -or -path "*/en.lproj/*.nib" \\) | grep -v "objects.nib" | grep -v "keyedobjects.nib"  | grep -v "classes.nib"  | grep -v "info.nib"  | grep -v "designable.nib"`);
	
	foreach $file (@searchResult)
	{
		if ($numOfError == 0)
		{
			print gLogFile "The following complied .nib file(s) found:\n";
		}

		$file =~ s/$gNewBasePath//;	# take out the base path
		
		print gLogFile "$file\n";
		
		$numOfError++;
	}
	
	$gTotalNumOfError = $gTotalNumOfError + $numOfError;
	
	
	if ($numOfError == 0)
	{
		print gLogFile "No Problem Found\n";
	}
	else
	{
		print gLogFile "\n";
	}
	
	print gLogFile "\n\n";
}


#-----------------------------------------------------------------------------------------
#	CheckSubmissionTarballs
#-----------------------------------------------------------------------------------------

sub CheckSubmissionTarballs
{
	my $numOfError = 0;
	my $index;
	

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking submission tarballs\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	print gLogFile "#----------------------------------------------------------------------------------------\n";
	print gLogFile "# Submission Tarballs Checking Result (Please ignore the following result for LXRip projects)\n";
	print gLogFile "#----------------------------------------------------------------------------------------\n";

	$numOfError = 0;
	
	for ($index = 0; $index < $gNumOfComponents; $index++)
	{
		chomp(@submissionTarballResult = `find "$gSubmissionPath" -type f | grep "$gComponentsList[$index]"`);
		
		if (@submissionTarballResult == 0)
		{
			print gLogFile "Cannot find tarball for $gComponentsList[$index]\n";
			
			$numOfError++;
		}
	}
		
	$gTotalNumOfError = $gTotalNumOfError + $numOfError;

	if ($numOfError == 0)
	{
		print gLogFile "No Problem Found\n";
	}
	
	print gLogFile "\n\n";
}


#---------------------------------------------------------------------------------------------
#	CheckSearchTermsFiles
#---------------------------------------------------------------------------------------------

sub CheckSearchTermsFiles
{
	my $numOfCheckingError = 0;
	my $file;
	

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking AppleGlot Environment .searchTerms Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	print gLogFile "#----------------------------------------------------------------------------------------\n";
	print gLogFile "# AppleGlot Environment .searchTerms Files Result\n";
	print gLogFile "#----------------------------------------------------------------------------------------\n";


	chomp(@searchResult = `find "$gNewBasePath" -type f \\( -path "*/English.lproj/*.searchTerms" \\)`);

	foreach $file (@searchResult)
	{
		if ($numOfCheckingError == 0)
		{
			print gLogFile "The following .searchTerms file(s) found:\n";
		}

		$file =~ s/$gNewBasePath//;	# take out the base path
		print gLogFile "$file\n";
		
		$numOfCheckingError++;
	}

		
	$gTotalNumOfError = $gTotalNumOfError + $numOfCheckingError;

	if ($numOfCheckingError == 0)
	{
		print gLogFile "No .searchTerms file Found\n";
	}
	
	print gLogFile "\n\n";
}


#---------------------------------------------------------------------------------------------
#	CheckPropertiesFiles
#---------------------------------------------------------------------------------------------

sub CheckPropertiesFiles
{
	my $numOfCheckingError = 0;
	my $file;
	

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking AppleGlot Environment .properties Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	print gLogFile "#----------------------------------------------------------------------------------------\n";
	print gLogFile "# AppleGlot Environment .properties Files Result\n";
	print gLogFile "#----------------------------------------------------------------------------------------\n";


	chomp(@searchResult = `find "$gNewBasePath" -type f \\( -path "*/*.properties" \\)`);

	foreach $file (@searchResult)
	{
		my $propertiesStringFile = $file . ".strings";
	
		AALocUtilities::PrintLog("Checking $propertiesStringFile\n");


		if (!(-e "$propertiesStringFile"))
		{
			if ($numOfCheckingError == 0)
			{
				print gLogFile "The following .properties.strings file(s) cannot find:\n";
			}

			$file =~ s/$gNewBasePath//;	# take out the base path
			print gLogFile "$file\n";
			
			$numOfCheckingError++;
		}
	}

		
	$gTotalNumOfError = $gTotalNumOfError + $numOfCheckingError;

	if ($numOfCheckingError == 0)
	{
		print gLogFile "No Problem Found\n";
	}
	
	print gLogFile "\n\n";
}


#---------------------------------------------------------------------------------------------
#	CheckWidgetJSFiles
#---------------------------------------------------------------------------------------------

sub CheckWidgetJSFiles
{
	my $numOfCheckingError = 0;
	my $file;
	

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking AppleGlot Environment .js Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	print gLogFile "#----------------------------------------------------------------------------------------\n";
	print gLogFile "# AppleGlot Environment .js Files Result\n";
	print gLogFile "#----------------------------------------------------------------------------------------\n";


	chomp(@searchResult = `find "$gNewBasePath" -type f \\( -path "*/*.js" \\)`);

	foreach $file (@searchResult)
	{
		AALocUtilities::PrintLog("Checking $file\n");
		
		my $jsStringFile = $file . ".strings";
	
		if (!(-e "$jsStringFile"))
		{
			if ($numOfCheckingError == 0)
			{
				print gLogFile "The following .js.strings file(s) cannot find:\n";
			}

			$file =~ s/$gNewBasePath//;	# take out the base path
			print gLogFile "$file\n";
			
			$numOfCheckingError++;
		}
	}

		
	$gTotalNumOfError = $gTotalNumOfError + $numOfCheckingError;

	if ($numOfCheckingError == 0)
	{
		print gLogFile "No Problem Found\n";
	}
	
	print gLogFile "\n\n";
}


#---------------------------------------------------------------------------------------------
#	CheckHiddenFiles
#---------------------------------------------------------------------------------------------

sub CheckHiddenFiles
{
	my $numOfCheckingError = 0;
	my $file;
	

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking AppleGlot Environment Hidden Files\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	print gLogFile "#----------------------------------------------------------------------------------------\n";
	print gLogFile "# AppleGlot Environment Hidden Files Result\n";
	print gLogFile "#----------------------------------------------------------------------------------------\n";


	chomp(@searchResult = `find $gNewBasePath -type f \\( -path "*/\.*" \\) | grep -v ".DS_Store"  | grep -v ".localized"`);


	foreach $file (@searchResult)
	{
		if ($numOfCheckingError == 0)
		{
			print gLogFile "The following Hidden file(s) found:\n";
		}

		$file =~ s/$gNewBasePath//;	# take out the base path
		print gLogFile "$file\n";
		
		$numOfCheckingError++;
	}

		
	$gTotalNumOfError = $gTotalNumOfError + $numOfCheckingError;

	if ($numOfCheckingError == 0)
	{
		print gLogFile "No Problem Found\n";
	}
	
	print gLogFile "\n\n";
}


#---------------------------------------------------------------------------------------------
#	IsInTheArray
#---------------------------------------------------------------------------------------------

sub IsInTheArray
{
	$project = shift;
	$arrayRef = shift;
	@Array = @$arrayRef;
	
	$there = 0;	
	
	foreach my $arrayItem (@Array)
	{
		if ($arrayItem eq $project)
		{
			$there = 1;
			last;
		}
	}
	
	return $there;
}


#---------------------------------------------------------------------------------------------
#	CheckOldLocOldBaseNibFilesFormatDifferent
#
#	Check <rdar://problem/5298699> OL and OB nib files format different
#---------------------------------------------------------------------------------------------

sub CheckOldLocOldBaseNibFilesFormatDifferent
{
	my $numOfCheckingError = 0;
	my $file;
	

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking AppleGlot Environment _OldLoc and _OldBase nib files format different\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	print gLogFile "#----------------------------------------------------------------------------------------\n";
	print gLogFile "# Checking AppleGlot Environment _OldLoc and _OldBase nib files format different\n";
	print gLogFile "#----------------------------------------------------------------------------------------\n";


	chomp (@temp = `find $gOldBasePath`);

	$i = 0;
	foreach $file (@temp)
	{	
		($oldBasePathFiles[$i] = $file) =~ s/$gOldBasePath//;
		$oldBasePathFiles[$i] =~ s/\/\w+\.lproj/\/<lang>\.lproj/;
		$i++;
	}


	chomp (@temp = `find $gOldLocPath`);
	$i = 0;
	foreach $file (@temp)
	{	
		($oldLocPathFiles[$i] = $file) =~ s/$gOldLocPath//;
		$oldLocPathFiles[$i] =~ s/\/\w+\.lproj/\/<lang>\.lproj/;
		$i++;
	}


	foreach $file (@oldLocPathFiles)
	{
		if (! IsInTheArray($file, \@oldBasePathFiles) && $file =~ /nib/)
		{
			if ($numOfCheckingError == 0)
			{
				print gLogFile "The following nib file(s) format in _OldLoc and _OldBase are different:\n";
			}

			print gLogFile "$file\n";
			$numOfCheckingError++;
		}
	}

		
	$gTotalNumOfError = $gTotalNumOfError + $numOfCheckingError;

	if ($numOfCheckingError == 0)
	{
		print gLogFile "No Problem Found\n";
	}
	
	print gLogFile "\n\n";
}


#---------------------------------------------------------------------------------------------
#	CheckLKCX
#---------------------------------------------------------------------------------------------

sub CheckLKCX
{
	($locKitName, $others) = reverse(split(/\//, $gLKCXEnvironmentPath));
	my $language = GetLocLanguage($gNewLocPath);
	my $numOfError = 0;
	my $error = "";
	my $index = 0;


	# $gCheckLKCXLogFile = $gLKCXInfoPath . "$locKitName" . "_checkLocKitLog.txt";

	if (-e $gCheckLKCXLogFile)
	{
		system "rm '$gCheckLKCXLogFile'";
	}

	open gLogFile, ">> $gCheckLKCXLogFile" or die "Failed to open $gCheckLKCXLogFile\n";

	print gLogFile "#========================================================================================\n";
	print gLogFile "# $locKitName Checking Result\n";
	print gLogFile "# ";
	print gLogFile `date`;
	print gLogFile "#========================================================================================\n";
	print gLogFile "\n";


	#-----------------------------------------------------------------------------------------
	#	Building Components List
	#-----------------------------------------------------------------------------------------

	my $newBaseFileName;
	my $directory;
	my $file;
	
	opendir(directory, $gNewBasePath);
    @searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		if ($file =~ /_Tier/)
		{
			($proj, $newBaseFileName) = reverse(split(/_Tier/, $file));
		}
		else
		{
			$newBaseFileName = $file;
		}
		
		$gComponentsList[$gNumOfComponents] = $newBaseFileName;
		$gNumOfComponents++;
	}
	
	opendir(directory, $gNonAGNewBasePath);
    @searchResult = grep { !/^\./} readdir(directory);
	closedir(directory);

	foreach $file (@searchResult)
	{
		if ($file =~ /_Tier/)
		{
			($proj, $newBaseFileName) = reverse(split(/_Tier/, $file));
		}
		else
		{
			$newBaseFileName = $file;
		}
		
		$gComponentsList[$gNumOfComponents] = $newBaseFileName;
		$gNumOfComponents++;
	}


	#-----------------------------------------------------------------------------------------
	#	Check Components .plist
	#-----------------------------------------------------------------------------------------

	CheckComponentsPlist();
	GenerateComponentsPlistReport();


	#-----------------------------------------------------------------------------------------
	#	Check AppleGlot Environment
	#-----------------------------------------------------------------------------------------

	AALocUtilities::PrintLog("\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");
	AALocUtilities::PrintLog("# Checking AppleGlot Environment\n");
	AALocUtilities::PrintLog("#----------------------------------------------------------------------------------------\n");

	print gLogFile "#----------------------------------------------------------------------------------------\n";
	print gLogFile "# AppleGlot Environment Checking Result\n";
	print gLogFile "#----------------------------------------------------------------------------------------\n";

	$numOfError = 0;
	
	if ($language eq "")
	{
		print gLogFile "Cannot find .lproj in _NewLoc\n";
		
		$numOfError++;
	}
	#	elsif ($language eq "pt_PT")
	#	{
	#	print gLogFile "Incorrect .lproj (pt_PT) in _NewLoc for BR\n";
	#	$numOfError++;
	#	}

	
	$numOfError += CheckAppleGlotEmptyFolder($gNewBasePath);
	$numOfError += CheckAppleGlotEmptyFolder($gOldBasePath);
	$numOfError += CheckAppleGlotEmptyFolder($gOldLocPath);


	$gTotalNumOfError = $gTotalNumOfError + $numOfError;

	if ($numOfError == 0)
	{
		print gLogFile "No Problem Found\n";
	}
	
	print gLogFile "\n\n";


	#-----------------------------------------------------------------------------------------
	#	Check AppleGlot Environment Permissions
	#-----------------------------------------------------------------------------------------

	#	CheckAppleGlotEnvironmentPermissions();

	
	#-----------------------------------------------------------------------------------------
	#	Check AppleGlot Cross Check Log
	#-----------------------------------------------------------------------------------------

	CheckAppleGlotCrossCheckLog();

	
	#-----------------------------------------------------------------------------------------
	#	Check AppleGlot .Strings Files
	#-----------------------------------------------------------------------------------------

	CheckAppleGlotStringsFiles();


	#-----------------------------------------------------------------------------------------
	#	Check AppleGlot Log files
	#-----------------------------------------------------------------------------------------

	CheckAppleGlotLogFiles();
	
	
	#-----------------------------------------------------------------------------------------
	#	Check Complied Nib files
	#-----------------------------------------------------------------------------------------
	
	CheckCompliedNib();
	

	#-----------------------------------------------------------------------------------------
	#	Check Submission Tarballs
	#-----------------------------------------------------------------------------------------

	CheckSubmissionTarballs();
	

	#-----------------------------------------------------------------------------------------
	#	Check AppleGlot .searchTerms Files
	#-----------------------------------------------------------------------------------------

	CheckSearchTermsFiles();
	

	#-----------------------------------------------------------------------------------------
	#	Check AppleGlot .properties Files
	#-----------------------------------------------------------------------------------------

	CheckPropertiesFiles();
	

	#-----------------------------------------------------------------------------------------
	#	Check AppleGlot .js Files
	#-----------------------------------------------------------------------------------------

	CheckWidgetJSFiles();
	

	#-----------------------------------------------------------------------------------------
	#	Check Hidden Files
	#-----------------------------------------------------------------------------------------

	CheckHiddenFiles();
	

	#-----------------------------------------------------------------------------------------
	#	Check OL and OB nib files format different
	#-----------------------------------------------------------------------------------------

	CheckOldLocOldBaseNibFilesFormatDifferent();


	#-----------------------------------------------------------------------------------------
	#
	#-----------------------------------------------------------------------------------------

	print gLogFile "#========================================================================================\n";
	print gLogFile "#                                E N D    O F    R E P O R T                             \n";
	print gLogFile "#========================================================================================\n";

	close gLogFile;


	if ($gTotalNumOfError != 0)
	{
		AALocUtilities::PrintLog("\n\nErrors found. Please check the log file $gCheckLKCXLogFile\n\n\n");
		
		`open -a "AD Viewer" "$gCheckLKCXLogFile"`;
	}
	else
	{
		AALocUtilities::PrintLog("\n\nNo problem found\n\n\n");
	}
}


#---------------------------------------------------------------------------------------------
#	Usage
#---------------------------------------------------------------------------------------------

sub Usage
{
	print "\n";
	print "AACheckLKCX [Version $version]\n";
	print "\nUsage: AACheckLKCX <LKCX Environment>\n\n";
	print "  -help or -h           Display this help.\n";
	# print "  -checkComponentPlist  check components.plist (default don't check)\n";
	print "  -checkAllLanguages    check all languages' issues in components.plist\n";
	print "\n";

	exit(2);
}




#=============================================================================================
#									E N D   O F   F I L E
#=============================================================================================

